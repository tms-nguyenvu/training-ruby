require 'thor'
require 'fileutils'
require 'pry'

module Remind
  module Commands
    class Cli < Thor
    SCHEDULE_FILE = File.expand_path(File.join(Dir.pwd, 'config', 'schedule.rb'))

      desc "set_env", "Set SLACK_WEBHOOK_URL in .env file"
      def set_env
        webhook_url = ask("Enter your Slack Webhook URL:")

        if webhook_url.empty?
          puts 'No URL provided. Aborting...'
          return
        end

        FileUtils.touch('.env') unless File.exist?('.env')

        env_content = File.read('.env')
        if env_content.match?(/^SLACK_WEBHOOK_URL=/)
          env_content.gsub!(/^SLACK_WEBHOOK_URL=.*/, "SLACK_WEBHOOK_URL=#{webhook_url}")
        else
          env_content << "\nSLACK_WEBHOOK_URL=#{webhook_url}\n"
        end

        File.write('.env', env_content)
        puts 'SLACK_WEBHOOK_URL has been set in .env file.'
      end

      desc 'add_task INTERVAL COMMAND', 'Add a task to the schedule'
      def add_task(interval, command)
        unless File.exist?(SCHEDULE_FILE)
          create_schedule_file
        end

        new_task = "every #{interval} do\n  rake '#{command}'\nend\n\n"
        File.open(SCHEDULE_FILE, 'a') { |f| f.puts new_task }
        puts "Task added to #{SCHEDULE_FILE}"
        update_cron
      end

      desc 'create_schedule_file', 'Create a schedule file'
      def create_schedule_file  
        FileUtils.mkdir_p(File.dirname(SCHEDULE_FILE))
        File.open(SCHEDULE_FILE, 'w') do |file|
          file.puts "# frozen_string_literal: true"
          file.puts "# This file is auto-generated by Thor CLI"
          file.puts "set :output, \"#{Dir.pwd}/log/cron_log.log\""
          file.puts "set :environment, :development\n\n"
        end
        puts "Schedule file created at #{SCHEDULE_FILE}"
      end


      desc 'update_cron', 'Update cron job'
      def update_cron
        system("whenever --update-crontab")
        puts "Crontab updated"
      end

      desc 'list_tasks', 'List all tasks'
      def list_tasks
        unless File.exist?(SCHEDULE_FILE)
          create_schedule_file
        end

        tasks = File.readlines(SCHEDULE_FILE).select { |line| line.match?(/^every/) }

        if tasks.empty?
          puts "No tasks found."
        else
          puts "Scheduled tasks:"
          tasks.each { |task| puts task }
        end
      end


      desc 'remove_task COMMAND', 'Remove a task from the schedule'
      def remove_task(command)
        content = File.read(SCHEDULE_FILE)
        new_content = content.gsub(/every .* do\n\s+rake '#{command}'\nend\n/, '')
        File.write(SCHEDULE_FILE, new_content)
        puts "Task removed from #{command}"
        update_cron
      end
    end
  end
end